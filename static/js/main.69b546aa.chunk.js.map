{"version":3,"sources":["components/slideshow/slideshow.js","App.js","serviceWorker.js","index.js"],"names":["Slideshow","props","getNewSlideIndex","step","slideIndex","state","numberSlide","input","length","newSlideIndex","backward","setState","forward","setSlideIndex","index","updateDimensions","containerElm","style","height","offsetWidth","ratioWH","runAutomatic","ratioWHArray","ratio","split","this","rootElm","ReactDOM","findDOMNode","querySelector","window","addEventListener","mode","timeout","automaticInterval","setInterval","Number","parseInt","removeEventListener","clearInterval","owlClass","className","map","image","key","src","alt","caption","onClick","width","React","Component","collection","process","App","Boolean","location","hostname","match","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.69b546aa.chunk.js","sourcesContent":["import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './slideshow.scss'\r\n\r\nexport default class Slideshow extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            slideIndex: 0\r\n        }\r\n\r\n        const ratioWHArray = this.props.ratio.split(\":\");\r\n        this.ratioWH = ratioWHArray[0] / ratioWHArray[1];\r\n    }\r\n\r\n    getNewSlideIndex = (step) => {\r\n        const slideIndex = this.state.slideIndex\r\n        const numberSlide = this.props.input.length\r\n\r\n        let newSlideIndex = slideIndex + step\r\n\r\n        if (newSlideIndex >= numberSlide) newSlideIndex = 0\r\n        else if (newSlideIndex < 0) newSlideIndex = numberSlide - 1\r\n\r\n        return newSlideIndex\r\n    }\r\n\r\n    backward = () => {\r\n        this.setState({\r\n          slideIndex: this.getNewSlideIndex(-1)\r\n        });\r\n      }\r\n    \r\n    forward = () => {\r\n        this.setState({\r\n            slideIndex: this.getNewSlideIndex(1)\r\n        });\r\n    }\r\n\r\n    setSlideIndex = (index) => {\r\n        this.setState({\r\n            slideIndex: index\r\n        })\r\n    }\r\n\r\n    updateDimensions = () => {\r\n        this.containerElm.style.height\r\n            = `${this.containerElm.offsetWidth / this.ratioWH}px`;\r\n    }\r\n\r\n    runAutomatic = () => {\r\n        this.setState({\r\n            slideIndex: this.getNewSlideIndex(1)\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.rootElm = ReactDOM.findDOMNode(this);\r\n        this.containerElm = this.rootElm.querySelector(\".slide-show__container\");\r\n\r\n        this.updateDimensions();\r\n        window.addEventListener(\"resize\", this.updateDimensions);\r\n\r\n        if (this.props.mode === \"automatic\") {\r\n            const timeout = this.props.timeout || 5000;\r\n\r\n            this.automaticInterval = setInterval(\r\n                () => this.runAutomatic(),\r\n                Number.parseInt(timeout)\r\n            );\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"resize\", this.updateDimensions);\r\n        if (this.automaticInterval) clearInterval(this.automaticInterval);\r\n    }\r\n\r\n    render() {\r\n        const owlClass = 'slide-show';\r\n        return (\r\n            <div className={`${owlClass}`}>\r\n                <div className={`${owlClass}__container`}>\r\n                    {\r\n                        this.props.input.map((image, index) => {\r\n                            return (\r\n                                <div\r\n                                    key={index}\r\n                                    className={`${this.state.slideIndex === index ? `${owlClass}__container-slide--active` : \"\"} ${owlClass}__container-slide`}>\r\n                                    <div className={`${owlClass}__container-slide--number-text`}>\r\n                                        {`${index + 1} / ${this.props.input.length}`}\r\n                                    </div>\r\n                                    <img className={`${owlClass}__container-slide--image`} src={image.src} alt={image.caption} />\r\n                                    <div className={`${owlClass}__container-slide--caption-text`}>{image.caption}</div>\r\n                                </div>\r\n                            )\r\n                        })\r\n                    }\r\n\r\n                    <span className={`${owlClass}__container-slide--next`} onClick={this.forward}>❮</span>\r\n                    <span className={`${owlClass}__container-slide--prev`} onClick={this.backward}>❯</span>\r\n                </div>\r\n\r\n                {/* <div className={`${owlClass}__dot-container`}>\r\n                    {\r\n                        this.props.input.map((_, index) => {\r\n                            return (\r\n                                <span\r\n                                    key={index}\r\n                                    className={`${owlClass}__dot-container--item ${this.state.slideIndex === index ? `${owlClass}__dot-container--item--active` : \"\"}`}\r\n                                    onClick={() => this.setSlideIndex(index)}\r\n                                >\r\n                                </span>\r\n                            )\r\n                        })\r\n                    }\r\n                </div> */}\r\n\r\n                <div className={`${owlClass}__cotainer-bottom`}>\r\n                    {\r\n                        this.props.input.map((image, index) => {\r\n                            return (\r\n                                <img\r\n                                  key={index}\r\n                                  src={image.src}\r\n                                  alt={image.caption}\r\n                                  className={`${owlClass}__container-bottom-item ${this.state.slideIndex === index ? `${owlClass}__container-bottom-item--active` : \"\"}`}\r\n                                  onClick={() => this.setSlideIndex(index)}\r\n                                  style={{\r\n                                    width: `${1 / this.props.input.length * 100}%`,\r\n                                    height: `100%`\r\n                                  }}\r\n                                />\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport './App.css';\n\nimport Slideshow from './components/slideshow/slideshow';\n\nconst collection = [\n    { src: process.env.PUBLIC_URL + \"/images/01.jpg\", caption: \"Caption one\" },\n    { src: process.env.PUBLIC_URL + \"/images/02.jpg\", caption: \"Caption two\" },\n    { src: process.env.PUBLIC_URL + \"/images/03.jpg\", caption: \"Caption three\" },\n    { src: process.env.PUBLIC_URL + \"/images/04.jpg\", caption: \"Caption four\" },\n    { src: process.env.PUBLIC_URL + \"/images/05.jpg\", caption: \"Caption five\" },\n    { src: process.env.PUBLIC_URL + \"/images/06.jpg\", caption: \"Caption six\" },\n];\n\nexport default class App extends React.Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <Slideshow\n                    input={collection}\n                    ratio={`3:2`}\n                    // mode={`automatic`}\n                    timeout={`3000`}\n                />\n            </div>\n        );\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}